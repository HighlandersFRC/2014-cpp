// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::driveBaseFRController = NULL;
SpeedController* RobotMap::driveBaseFLController = NULL;
SpeedController* RobotMap::driveBaseBRController = NULL;
SpeedController* RobotMap::driveBaseBLController = NULL;
RobotDrive* RobotMap::driveBaseRobotDrive41 = NULL;
SpeedController* RobotMap::beltBeltMotor = NULL;
SpeedController* RobotMap::shoulderShoulderMotor = NULL;
SpeedController* RobotMap::injectorInjectorController = NULL;
DigitalInput* RobotMap::injectorInjectorLimit = NULL;
SpeedController* RobotMap::launcherLaunchController = NULL;
SpeedController* RobotMap::indexerIndexerController = NULL;
SpeedController* RobotMap::articulatorArticulatorMotor = NULL;
Encoder* RobotMap::articulatorQuadratureEncoder1 = NULL;
DigitalInput* RobotMap::articulatorArticulatorLimit = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	driveBaseFRController = new Talon(1, 4);
	lw->AddActuator("DriveBase", "FRController", (Talon*) driveBaseFRController);
	
	driveBaseFLController = new Talon(1, 1);
	lw->AddActuator("DriveBase", "FLController", (Talon*) driveBaseFLController);
	
	driveBaseBRController = new Victor(1, 3);
	lw->AddActuator("DriveBase", "BRController", (Victor*) driveBaseBRController);
	
	driveBaseBLController = new Victor(1, 2);
	lw->AddActuator("DriveBase", "BLController", (Victor*) driveBaseBLController);
	
	driveBaseRobotDrive41 = new RobotDrive(driveBaseFLController, driveBaseBLController,
              driveBaseFRController, driveBaseBRController);
	
	driveBaseRobotDrive41->SetSafetyEnabled(true);
        driveBaseRobotDrive41->SetExpiration(0.1);
        driveBaseRobotDrive41->SetSensitivity(0.5);
        driveBaseRobotDrive41->SetMaxOutput(1.0);
	beltBeltMotor = new Victor(1, 10);
	lw->AddActuator("Belt", "BeltMotor", (Victor*) beltBeltMotor);
	
	shoulderShoulderMotor = new Victor(1, 9);
	lw->AddActuator("Shoulder", "ShoulderMotor", (Victor*) shoulderShoulderMotor);
	
	injectorInjectorController = new Victor(1, 6);
	lw->AddActuator("Injector", "InjectorController", (Victor*) injectorInjectorController);
	
	injectorInjectorLimit = new DigitalInput(1, 2);
	lw->AddSensor("Injector", "InjectorLimit", injectorInjectorLimit);
	
	launcherLaunchController = new Victor(1, 5);
	lw->AddActuator("Launcher", "LaunchController", (Victor*) launcherLaunchController);
	
	indexerIndexerController = new Victor(1, 7);
	lw->AddActuator("Indexer", "IndexerController", (Victor*) indexerIndexerController);
	
	articulatorArticulatorMotor = new Talon(1, 8);
	lw->AddActuator("Articulator", "ArticulatorMotor", (Talon*) articulatorArticulatorMotor);
	
	articulatorQuadratureEncoder1 = new Encoder(1, 3, 1, 4, false, Encoder::k4X);
	lw->AddSensor("Articulator", "Quadrature Encoder 1", articulatorQuadratureEncoder1);
	articulatorQuadratureEncoder1->SetDistancePerPulse(1.0);
        articulatorQuadratureEncoder1->SetPIDSourceParameter(Encoder::kRate);
        articulatorQuadratureEncoder1->Start();
	articulatorArticulatorLimit = new DigitalInput(1, 1);
	lw->AddSensor("Articulator", "ArticulatorLimit", articulatorArticulatorLimit);
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
